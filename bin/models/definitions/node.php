<?php namespace definitions;

use IntegerField;
use Reference;
use spitfire\Model;
use spitfire\storage\database\Schema;
use StringField;

/* 
 * The MIT License
 *
 * Copyright 2020 CÃ©sar de la Cal Bretschneider <cesar@magic3w.com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

class NodeModel extends Model
{
	
	/**
	 * 
	 * @param Schema $schema
	 * @return Schema
	 */
	public function definitions(Schema $schema) {
		/**
		 * This allows nesting the nodes, making a navigation ready configuration 
		 * page for your application.
		 */
		$schema->parent = new Reference(NodeModel::class);
		$schema->ordinal = new IntegerField(true);
		
		/*
		 * Allows settings and groups to be marked as readonly by the system, this
		 * implies that the data was generated by importing the data.
		 */
		$schema->readonly = new \BooleanField();
		
		/*
		 * The source can be used to record the URL this data was imported from.
		 * This can be used by the system to indicate that certain data needs to
		 * be manually reviewed if an import did not update it.
		 */
		$schema->source   = new StringField(512);
		
		/*
		 * 
		 */
		$schema->created  = new \IntegerField(true);
		$schema->updated  = new \IntegerField(true);
		$schema->deleted  = new \IntegerField(true);
		
		$schema->key = new StringField(100);
		$schema->index($schema->key)->unique(true);
	}
	
	public function onbeforesave() {
		/*
		 * If the parent changes, we need to properly place this element among it's
		 * new siblings, the easiest way to do this is to find the "youngest" and add
		 * this one afterwards.
		 * 
		 * Note: I am aware that this does not fil any gaps between siblings that were
		 * left behind, for example, if a group A contains the siblings 1,2,3... removing
		 * the number 2 will leave the old group with siblings 1 and 3.
		 * 
		 * While the gap may be annoying, the functionality of the field is not compromised
		 * by gaps, since the gap will just leave the list improperly sorted.
		 */
		if (!$this->getData()['parent']->isSynced()) {
			$sibling = db()->table('definitions\node')->get('parent', $this->parent)->setOrder('ordinal', 'ASC')->first();
			$ordinal = $sibling? $sibling->ordinal + 1 : 1;
			
			$this->ordinal = $ordinal;
		}
		
		if (!$this->created) {
			$this->created = time();
		}
		
		$this->updated = time();
	}

}
